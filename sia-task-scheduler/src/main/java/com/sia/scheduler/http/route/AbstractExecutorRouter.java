/*-
 * <<
 * task
 * ==
 * Copyright (C) 2019 sia
 * ==
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * >>
 */

package com.sia.scheduler.http.route;

import com.sia.core.entity.JobMTask;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;

/**
 * Routing strategy Abstract class.
 * The abstract method {@Link routeRun(JobMTask taskKey, List<String> addressList)} is used to obtain the routing policy of the execution instance of the task.
 *
 * Provide a method {@protected void clearTaskCache(JobMTask taskKey)} to clear the cached data during execution,
 * specifically the cached data generated by running the routing policy.
 *
 * @see
 * @author maozhengwei
 * @date 2018-04-23 18:55
 * @version V1.0.0
 **/
public abstract class AbstractExecutorRouter {

    protected static final Logger LOGGER = LoggerFactory.getLogger(AbstractExecutorRouter.class);

    /**
     * enums run job
     *
     * @param taskKey
     * @param addressList
     * @return  ReturnT.content: final address
     */
    public abstract String routeRun(JobMTask taskKey, List<String> addressList);


    protected void clearTaskCache(JobMTask taskKey){

    }

}
